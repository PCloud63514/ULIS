package org.ulis.presentation;

import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;
import org.ulis.domain.Administrator;
import org.ulis.domain.Student;
import org.ulis.service.LoginService;

@Controller
public class LoginController {
	@Resource
	private LoginService loginService;

	@RequestMapping(value= "/login", method = RequestMethod.GET)
	public ModelAndView login(HttpServletRequest request) {
		HttpSession httpSession = request.getSession(true);
		if (httpSession.getAttribute("id") != null) {
			return new ModelAndView(new RedirectView("/notice/find"));
		} else {
			return new ModelAndView("/login");
		}
	}

	@RequestMapping(value = "/login/mobile", method = RequestMethod.POST)
	public @ResponseBody ResponseEntity<Map<String,Object>> loginedMobile(HttpServletRequest request,
			HttpServletResponse response, String userNo, String password, String userToken) {
		HttpHeaders httpHeaders = new HttpHeaders();
		httpHeaders.setContentType(new MediaType("text", "json", Charset.forName("UTF-8")));

		Map map = new HashMap<String, Object>();

		if (userNo != null && "".equals(userNo) == false && password != null && "".equals(password) == false) {
			map = (Map) this.loginService.login(userNo, password, userToken);
			
			if (map != null) {
				return new ResponseEntity<Map<String, Object>>(map, httpHeaders, HttpStatus.OK);
			}
		}
		
		return new ResponseEntity<Map<String, Object>>(null, httpHeaders, HttpStatus.BAD_REQUEST);
	}

	@ResponseBody
	@RequestMapping(value="/login", method = RequestMethod.POST)
	public ModelAndView logined(HttpServletRequest request, HttpServletResponse response, String userNo,
			String password, String userToken) throws Exception {

		if (userNo != null && "".equals(userNo) == false && password != null && "".equals(password) == false) {
			Administrator administrator = (Administrator)this.loginService.login(userNo, password, userToken);

			if (administrator != null) {
				return new ModelAndView(new RedirectView("/notice/find"));
			}

		}
		return new ModelAndView("/login");
	}

	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public ModelAndView logout(HttpServletRequest request) throws Exception {
		this.loginService.logout(request);

		return new ModelAndView(new RedirectView("/login"));
	}
}
