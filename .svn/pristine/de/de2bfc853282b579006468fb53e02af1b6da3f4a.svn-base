package org.ulis.presentation;

import java.io.File;
import java.io.IOException;
import java.net.URLEncoder;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FileUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;
import org.ulis.domain.NoticeBoard;
import org.ulis.domain.NoticeBoardFile;
import org.ulis.service.NoticeService;

import com.fasterxml.jackson.databind.ObjectMapper;

@Controller
@RequestMapping("/notice")
public class NoticeController {
	@Resource
	private NoticeService noticeService;

	@RequestMapping(value = "/find", method = RequestMethod.GET)
	public ModelAndView find(NoticeBoard noticeBoard, HttpServletRequest request, HttpServletResponse response) {
		String userAgent = request.getHeader("User-Agent");

		List<NoticeBoard> noticeBoardList = this.noticeService.find(noticeBoard);
		if (userAgent.indexOf("Android") > -1) {
			ObjectMapper objectMapper = new ObjectMapper();
			try {
				response.getWriter().print(objectMapper.writeValueAsString(noticeBoardList));
			} catch (Exception e) {
				e.printStackTrace();
			}

			return null;
		} else if (userAgent.indexOf("Windows") > -1) {
			ModelAndView modelAndView = new ModelAndView("/notice/find");
			modelAndView.addObject("noticeBoardList", noticeBoardList);

			return modelAndView;
		}

		return null;
	}

	@RequestMapping(value = "/add")
	public ModelAndView add() {
		return new ModelAndView("/notice/add");
	}

	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public ModelAndView add(NoticeBoard noticeBoard, MultipartHttpServletRequest multipartHttpServletRequest) throws Exception {
		
		int noticeSEQ = this.noticeService.addNotice(noticeBoard);
		MultipartFile file = multipartHttpServletRequest.getFile("image");
		if (!file.isEmpty()) {
			this.noticeService.addFile(file, "I", noticeSEQ);
		}

		List<MultipartFile> files = multipartHttpServletRequest.getFiles("file");
		if (!files.isEmpty() && !"".equals(files.get(0).getOriginalFilename())) {
			for (int fileCount = 0; fileCount < files.size(); fileCount++) {
				this.noticeService.addFile(files.get(fileCount), "D", noticeSEQ);
			}
		}
		return new ModelAndView(new RedirectView("/notice/find"));
	}

	@RequestMapping(value = "/view/{noticeBoardNo}", method = RequestMethod.GET)
	public ModelAndView view(@PathVariable int noticeBoardNo, HttpServletRequest request, HttpServletResponse response) {
		NoticeBoard noticeBoard = new NoticeBoard();
		noticeBoard.setNoticeBoardNo(noticeBoardNo);

		Map<String, Object> noticeViewMap = this.noticeService.view(noticeBoard);
		String userAgent = request.getHeader("User-Agent");

		if (userAgent.indexOf("Android") > -1) {
			ObjectMapper objectMapper = new ObjectMapper();
			try {
				response.getWriter().print(objectMapper.writeValueAsString(noticeViewMap));
			} catch (Exception e) {
				e.printStackTrace();
			}

			return null;
		} else if (userAgent.indexOf("Windows") > -1) {
			ModelAndView modelAndView = new ModelAndView("/notice/view");
			modelAndView.addObject("noticeBoard", noticeViewMap.get("noticeboard"));
			modelAndView.addObject("image", noticeViewMap.get("image"));
			modelAndView.addObject("document", noticeViewMap.get("document"));

			return modelAndView;
		}
		return null;
	}

	@RequestMapping(value = "/remove/{noticeBoardNo}", method = RequestMethod.GET)
	public ModelAndView remove(@PathVariable int noticeBoardNo) {
		this.noticeService.remove(noticeBoardNo);

		return new ModelAndView(new RedirectView("/notice/find"));
	}

	@RequestMapping(value = "/edit/{noticeBoardNo}", method = RequestMethod.GET)
	public ModelAndView edit(@PathVariable int noticeBoardNo) {
		ModelAndView modelAndView = new ModelAndView("/notice/edit");
		NoticeBoard noticeBoard = new NoticeBoard();
		noticeBoard.setNoticeBoardNo(noticeBoardNo);
		//view와 같으나 권태헌이 객체 이용여부에 따라 변경 할 예정  //에러떠서 수정함
		//Map<String, Object> noticeViewMap = this.noticeService.edit(noticeBoardNo);
		Map<String, Object> noticeViewMap = this.noticeService.view(noticeBoard);
		modelAndView.addObject("noticeBoard", noticeViewMap.get("noticeboard"));
		modelAndView.addObject("image", noticeViewMap.get("image"));
		modelAndView.addObject("document", noticeViewMap.get("document"));
		
		return modelAndView;
	}
	
	@RequestMapping(value = "/edit", method = RequestMethod.POST)
	public ModelAndView edit() {
		//
		return new ModelAndView("/notice/find/");
	}

	public void alarm() {

	}
	
	@RequestMapping("/view/download/{physicsfileName}")
    public void download(@PathVariable String physicsfileName, HttpServletResponse response) throws IOException {
        NoticeBoardFile downloadItem = new NoticeBoardFile();
        downloadItem = this.noticeService.download(physicsfileName);
        
        String[] filePath = downloadItem.getFilePath().split(" ");
        
        byte fileByte[] = FileUtils.readFileToByteArray(new File("C:\\Users\\CHOJAEYOUNG\\Downloads\\ULIS\\"+ filePath[0] + "\\" + downloadItem.getPhysicsfileName()));
        
        response.setContentType("application/octet-stream");
        response.setContentLength(fileByte.length);
        response.setHeader("Content-Disposition", "attachment; filename=\"" + URLEncoder.encode(downloadItem.getLogicfileName(), "UTF-8") + "\";");
        response.setHeader("Content-Ttransfere-Encoding", "binary");
        response.getOutputStream().write(fileByte);
        
        response.getOutputStream().flush();
        response.getOutputStream().close();
	}

}
