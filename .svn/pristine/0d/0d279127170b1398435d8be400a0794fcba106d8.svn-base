package org.ulis.service;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Service;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.ulis.domain.Administrator;
import org.ulis.domain.Student;
import org.ulis.persistence.AdministratorMapper;
import org.ulis.persistence.StudentMapper;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class LoginServiceImpl implements LoginService {
	@Resource
	private StudentMapper studentMapper;

	@Resource
	private AdministratorMapper administratorMapper;

	@Override
	public String login(String userNo, String password, String userToken) {
		ServletRequestAttributes servletRequestAttribute = (ServletRequestAttributes) RequestContextHolder
				.currentRequestAttributes();
		HttpServletRequest request = servletRequestAttribute.getRequest();
		String userAgent = request.getHeader("User-Agent");
		if (userAgent.indexOf("Android") > -1) {
			Student student = new Student();
			student.setStudentNo(userNo);
			student.setPassword(password);

			student = this.studentMapper.select(student);
			
			if (student != null) {
				student.setFcmToken(userToken);
				this.studentMapper.updateFcm(student);
				
				System.out.println(student.getStudentName());
				HttpSession httpSession = request.getSession(true);
				httpSession.setAttribute("roleType", "S");
				httpSession.setAttribute("id", student.getStudentNo());
				httpSession.setAttribute("subjectNo", student.getSubjectNo());
				httpSession.setAttribute("agentType", "A");
				
				HttpServletResponse response = servletRequestAttribute.getResponse();
				ObjectMapper objectMapper = new ObjectMapper();
				try {
					response.getWriter().print(objectMapper.writeValueAsString(student));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			
			return "A";
			
		} else if (userAgent.indexOf("Windows") > -1) {
			Administrator administrator = new Administrator();

			administrator.setAdministratorNo(userNo);
			administrator.setPassword(password);
			System.out.println("Start:" + administrator.toString());
			administrator = this.administratorMapper.select(administrator);
			System.out.println("End:" + administrator.toString());
			if (administrator != null) {
				HttpSession httpSession = request.getSession(true);
				httpSession.setAttribute("roleType", "A");
				httpSession.setAttribute("id", administrator.getAdministratorNo());
				httpSession.setAttribute("subjectNo", administrator.getSubjectNo());
				httpSession.setAttribute("agentType", "W");
				return "W";
			}
		}
		return null;
	}

	@Override
	public Boolean logout(HttpServletRequest request) {
		HttpSession httpSession = request.getSession(false);

		if (httpSession != null) {
			httpSession.invalidate();

			return true;
		} else {
			return false;
		}

	}
}